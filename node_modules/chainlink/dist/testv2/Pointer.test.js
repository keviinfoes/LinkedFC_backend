"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const h = __importStar(require("../src/helpersV2"));
const chai_1 = require("chai");
const PointerFactory_1 = require("contracts/PointerFactory");
const LinkTokenFactory_1 = require("contracts/LinkTokenFactory");
const buidler_1 = __importDefault(require("@nomiclabs/buidler"));
const provider_1 = require("../src/provider");
const pointerFactory = new PointerFactory_1.PointerFactory();
const linkTokenFactory = new LinkTokenFactory_1.LinkTokenFactory();
const provider = new provider_1.EthersProviderWrapper(buidler_1.default.ethereum);
let roles;
beforeAll(async () => {
    const rolesAndPersonas = await h.initializeRolesAndPersonas(provider);
    roles = rolesAndPersonas.roles;
});
describe('Pointer', () => {
    let contract;
    let link;
    beforeEach(async () => {
        link = await linkTokenFactory.connect(roles.defaultAccount).deploy();
        contract = await pointerFactory
            .connect(roles.defaultAccount)
            .deploy(link.address);
    });
    it('has a limited public interface', () => {
        h.checkPublicABI(contract, ['getAddress']);
    });
    describe('#getAddress', () => {
        it('returns the LINK token address', async () => {
            chai_1.assert.equal(await contract.getAddress(), link.address);
        });
    });
});
//# sourceMappingURL=Pointer.test.js.map